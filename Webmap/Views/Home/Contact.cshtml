@using Newtonsoft.Json
@model Webmap.Models.AddressesModel

<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.3/dist/leaflet.css" integrity="sha512-07I2e+7D8p6he1SIM+1twR5TIrhUQn9+I6yjqD53JQjFiMf8EtC93ty0/5vJTZGF8aAocvHYNEDJajGdNx1IsQ==" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.0.3/dist/leaflet-src.js" integrity="sha512-WXoSHqw/t26DszhdMhOXOkI7qCiv5QWXhH9R7CgvgZMHz1ImlkVQ3uNsiQKu5wwbbxtPzFXd1hK4tzno2VqhpA==" crossorigin=""></script>
	
    <link rel="stylesheet" href="~/Content/MarkerCluster.css"/>
    <link rel="stylesheet" href="~/Content/MarkerCluster.Default.css"/>

    <script src="~/Scripts/leaflet.markercluster-src.js"></script>
    <script src="~/Scripts/api.js"></script>
    <script src="~/Scripts/app.js"></script>
    
    <style>
        html,
        body {
            margin: 0;
            font-family: Arial;
            font-size: 16px;
            width: 100%;
            height: 100%;
            
        }
        a {
            text-decoration: none;
        }
        #map {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        #sidebarContainer {
            display: none;
            position: absolute;
            top: 0;
            width: 25%;
            height: 96%;
            background: orange;
            margin-left: 1%;
            margin-top: 0.5%;
            margin-bottom: 0.5%;
            }
        .wrapper {
            display: grid;
            grid-template-columns: repeat(2, 50%);
        }
        .one {
            grid-column: 1 / 2;
        }
        .two {
            grid-column: 2 / 2;
        }
        
        [class*='close-'] {
            color: #777;
            font: 18px/100% arial, sans-serif;
            position: absolute;
            right: 25px;
            text-decoration: none;
            text-shadow: 0 1px 0 #fff;
            top: 25px;
        }

        .close-classic:after {
            content: 'X'; /* ANSI X letter */
        }

        .close-thin:after {
            content: '×'; /* UTF-8 symbol */
        }

        .close-thik:after {
            content: '✖'; /* UTF-8 symbol */
        }
        
        .dialog {
            background: #ddd;
            border: 1px solid #ccc;
            border-radius: 5px;
            float: left;
            height: 200px;
            margin: 20px;
            position: relative;
            width: 150px;
  
        }

    </style>

</head>

<body>
<div>@Html.DropDownList("Years", new SelectList(Model.AddressDictionary.Keys), new {onchange= "populateWithYear(this)" })</div>

<div id="map"></div>

<div id="sidebarContainer">
    <a href="#" class="close-thik" onclick="$('#sidebarContainer').hide()"></a>
    <div>
        <h2 id="title">ул. Баумана, 31А</h2>
        <h3 id="subtitle">Екатеринбург, Свердловская обл.</h3>
        <h3 id="postcode">123456</h3>
    </div>
    <div>
        <button onclick="openTab('passport')">Паспорт</button>
        <button onclick="openTab('queue')">Очередь работ</button>
    </div>

    <div id="passport" class="tab">
        <div id="info_placeholder" style="display: none">
            Мы не нашли информацию о капитальном ремонте
        </div>
        <div id="info" class="wrapper">
            <div class="one" style="grid-row: 1">Год ввода в эксплуатацию</div>
            <div class="two" style="grid-row: 1" id="StartingYear">не известно</div>
            <div class="one" style="grid-row: 2">Размер взноса на капитальный ремонт</div>
            <div class="two" style="grid-row: 2" id="PamentByMeter">не известно</div>
            <div class="one" style="grid-row: 3">Собрано средств собственников</div>
            <div class="two" style="grid-row: 3" id="Collected">не известно</div>
            <div class="one" style="grid-row: 4">Текущая задолженность собственников по взносам</div>
            <div class="two" style="grid-row: 4" id="Dept">не известно</div>
            <div class="one" style="grid-row: 5">Израсходовано на работы </div>
            <div class="two" style="grid-row: 5" id="Spent">не известно</div>
            <div class="one" style="grid-row: 6">В т.ч. израсходовано субсидий</div>
            <div class="two" style="grid-row: 6" id="SpentSubsidy">не известно</div>
            <div class="one" style="grid-row: 7">Остаток средств на проведение капремонта</div>
            <div class="two" style="grid-row: 7" id="Balance">не известно</div>
            <div class="one" style="grid-row: 8">Год ближайших работ</div>
            <div class="two" style="grid-row: 8" id="NextWorkYear">не известно</div>
        </div>
    </div>

    <div id="queue" class="tab" style="display: none">
        пизда
    </div>


</div>

<script>
    function openTab(id) {
        $(".tab").hide();
        $("#" + id).show();
    }
</script>

<script>
    var tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            {
                maxZoom: 18,
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }),
        latlng = new L.LatLng(56.839360, 60.608925);

    var map = new L.Map('map', { center: latlng, zoom: 15, layers: [tiles] });

    var markers = new L.MarkerClusterGroup();
    var markersList = [];

    function populate() {
        var data = @Html.Raw(JsonConvert.SerializeObject(Model));
        var yearsPoints = data.AddressDictionary[2017];
        for (var i = 0; i < yearsPoints.length; i++) {
            var latLng = new L.LatLng(yearsPoints[i].Latitude, yearsPoints[i].Longitude);
            var m = new L.Marker(latLng);
            markersList.push(m);
            markers.addLayer(m);
            m.bindPopup("<b>Hello world!</b><br>I am a popup.").openPopup();
        }

        //for (var i = 0; i < 100; i++) {
        //    var m = new L.Marker(getRandomLatLng(map));
        //    markersList.push(m);
        //    markers.addLayer(m);
        //    m.bindPopup("<b>Hello world!</b><br>I am a popup.").openPopup();
        //}
        return false;
    }

    function populateWithYear(year) {
        markers.clearLayers();
        var data = @Html.Raw(JsonConvert.SerializeObject(Model));
        var yearsPoints = data.AddressDictionary[year.value];
        for (var k = 0; k < yearsPoints.length; k++) {
            var latLng = new L.LatLng(yearsPoints[k].Latitude, yearsPoints[k].Longitude);
            var m = new L.Marker(latLng);
            markersList.push(m);
            markers.addLayer(m);
            m.bindPopup("<b>Hello world!</b><br>I am a popup.").openPopup();
        }

        //for (var i = 0; i < 100; i++) {
        //    var m = new L.Marker(getRandomLatLng(map));
        //    markersList.push(m);
        //    markers.addLayer(m);
        //    m.bindPopup("<b>Hello world!</b><br>I am a popup.").openPopup();
        //}
        return false;
    }

    function getRandomLatLng(map) {
        var bounds = map.getBounds(),
            southWest = bounds.getSouthWest(),
            northEast = bounds.getNorthEast(),
            lngSpan = northEast.lng - southWest.lng,
            latSpan = northEast.lat - southWest.lat;

        return new L.LatLng(
            southWest.lat + latSpan * Math.random(),
            southWest.lng + lngSpan * Math.random());
    }


    populate();
    map.addLayer(markers);

    map.on('click', function(e) { mapOnClick(e); });

</script>

</body>

</html>